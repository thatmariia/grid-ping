:py:mod:`FrequencyToCurrentConverter`
=====================================

.. py:module:: FrequencyToCurrentConverter


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   FrequencyToCurrentConverter.FrequencyToCurrentConverter




.. py:class:: FrequencyToCurrentConverter

   This class converts the frequencies stimulus into the currents stimulus.

   .. py:method:: convert(self, stimulus_frequencies: numpy.ndarray[int, float], params_ping: src.izhikevich_simulation.IzhikevichNetworkSimulator.ParamsPING, params_izhi: src.izhikevich_simulation.IzhikevichNetworkSimulator.ParamsIzhikevich) -> numpy.ndarray[int, float]

      Converts the frequencies stimulus into the currents stimulus.

      TODO:: how do IN cite this?

      :param stimulus_frequencies: frequencies stimulus.
      :type stimulus_frequencies: numpy.ndarray[int, float]

      :param params_ping: parameters describing PING networks and their composition.
      :type params_ping: ParamsPING

      :param params_izhi: contains Izhikevich parameters.
      :type params_izhi: ParamsIzhikevich

      :return: the stimulus converted to currents.
      :rtype: numpy.ndarray[int, float]


   .. py:method:: _fit_line_robust(self, x: numpy.ndarray[int, float], y: numpy.ndarray[int, float]) -> sklearn.linear_model.TheilSenRegressor

      Creates a model that fits a line to the data.

      :param x: values to predict (target).
      :type x: numpy.ndarray[int, float]

      :param y: values used for prediction.
      :type y: numpy.ndarray[int, float]

      :return: a fitted regression model.
      :rtype: TheilSenRegressor


   .. py:method:: _simulate(self, simulation_time: int, params_ping: src.izhikevich_simulation.IzhikevichNetworkSimulator.ParamsPING, params_izhi: src.izhikevich_simulation.IzhikevichNetworkSimulator.ParamsIzhikevich, mean_ex: float) -> src.izhikevich_simulation.IzhikevichNetworkOutcome.IzhikevichNetworkOutcome

      Simulates an Izhikevich network with a single PING.

      :param simulation_time: number of epochs to run the simulation.
      :type simulation_time: int

      :param params_ping: parameters describing PING networks and their composition.
      :type params_ping: ParamsPING

      :param params_izhi: contains Izhikevich parameters.
      :type params_izhi: ParamsIzhikevich

      :param mean_ex: mean of input strength to excitatory neurons.
      :type mean_ex: float

      :return: collected information from the simulation.
      :rtype: IzhikevichNetworkOutcome


   .. py:method:: _make_tfr(self, simulation_time: int, signal: list[int]) -> int

      TODO:: Determines most prominent frequency??

      :param simulation_time: number of epochs to run the simulation.
      :type simulation_time: int

      :param signal: number of excitatory neurons fired at relevant epochs of the simulation.
      :type signal: list[int]

      :return: TODO:: most prominent frequency?
      :rtype: int


   .. py:method:: _plot_relationship(self, freqs: numpy.ndarray[int, float], currents: numpy.ndarray[int, float], freqs_line: numpy.ndarray[int, float], currents_line: numpy.ndarray[int, float]) -> None

      Plots the relationship between frequency and current.

      :param freqs: frequencies from simulated data.
      :type freqs: numpy.ndarray[int, float]

      :param currents: currents from simulated data.
      :type currents: numpy.ndarray[int, float]

      :param freqs_line: frequencies from fitted line.
      :type freqs_line: numpy.ndarray[int, float]

      :param currents_line: currents from fitted line.
      :type currents_line: numpy.ndarray[int, float]

      :rtype: None



