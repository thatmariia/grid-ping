:py:mod:`misc`
==============

.. py:module:: misc


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   misc.plot_binary_heatmap
   misc.neur_slice
   misc.neur_type
   misc.multiply_point
   misc.add_points
   misc.point_ceil
   misc.euclidian_dist



.. py:function:: plot_binary_heatmap(im: numpy.ndarray[(int, int), float], path: str) -> None

   Plots a heatmap with the binary color scheme

   :param im: matrix to plot
   :type im: numpy.ndarray[(int, int), float]

   :param path: path for saving the resulting plot
   :type path: str

   :rtype: None


.. py:function:: neur_slice(neuron_type: src.NeuronTypes.NeuronTypes, nr_ex: int, nr_in: int) -> slice

   By design, we put excitatory neurons in lists before inhibitory. This function returns relevant slices.

   :param neuron_type: the type of neuron we need indices for.
   :type neuron_type: NeuronTypes

   :param nr_ex: number of excitatory neurons.
   :type nr_ex: int

   :param nr_in: number of inhibitory neurons.
   :type nr_in: int

   :return: a slice for the neurons of given type.
   :rtype: slice


.. py:function:: neur_type(id: int, nr_ex: int) -> src.NeuronTypes.NeuronTypes

   By design, we put excitatory neurons in lists before inhibitory. Returns the type of the neuron at a particular ID.

   :param id: the ID of the neuron.
   :type id: int

   :param nr_ex: number of excitatory neurons in a network, where the neuron is located.
   :type nr_ex: int

   :return: the neuron type.
   :rtype: NeuronTypes


.. py:function:: multiply_point(point: tuple[float, Ellipsis], coef: float) -> tuple[float, Ellipsis]

   Multiples each value in a given tuple by a coefficient.

   :param point: the point to multiply.
   :type point: tuple[float, ...]

   :param coef: the coefficient to multiply the points by.
   :type coef: float

   :return: the tuple, where each element is multiplied by the coefficient.
   :rtype: tuple[float]


.. py:function:: add_points(points: list[tuple[float, Ellipsis]], coefs=None) -> tuple[float, Ellipsis]

   Adds values in tuples (for adding coordinates).

   :param points: list of tuples to add together.
   :type points: list[tuple[float, ...]]

   :param coefs: coefficients before the tuples (all 1's by default).
   :type coefs: list[float]

   :raises:
       AssertionError: if the number of tuples and coefficients are not equal.
   :raises:
       AssertionError: if the number of values is not equal in all tuples.

   :return: the sum of tuples.
   :rtype: tuple[float, ...]


.. py:function:: point_ceil(p: tuple[float, Ellipsis]) -> tuple[int, Ellipsis]

   Computes the ceiling of a tuple.

   :param p: a tuple.
   :type p: tuple[float, ...]

   :return: tuple of ceilings of all values in the given tuple.
   :rtype: tuple[int, ...]


.. py:function:: euclidian_dist(p1: tuple[float, float], p2=(0, 0)) -> float

   Calculates the Euclidian distance between two points.

   :param p1: coordinates of point_pix 1.
   :type p1: tuple[float, float]

   :param p2: coordinates of point_pix 2.
   :type p2: tuple[float, float]

   :return: the Euclidean distance between two 2D points.
   :rtype: float


