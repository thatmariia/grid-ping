:py:mod:`StimulusFactory`
=========================

.. py:module:: StimulusFactory


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   StimulusFactory.CurrentStimulusFactory




.. py:class:: CurrentStimulusFactory

   This class creates an external stimulus (Gabor texture) and prepares for the neural network input.

   .. py:method:: create(self, spatial_freq: float, vlum: float, diameter_dg: float, diameter: int, dist_scale: float, full_width_dg: float, full_height_dg: float, contrast_range: float, figure_width_dg: float, figure_height_dg: float, figure_ecc_dg: float, patch_size_dg: float, nr_ping_networks: int, slope: float, intercept: float, min_diam_rf: float, nr_neurons: dict[Any, int], neur_slice: dict[src.Stimulus.NeuronTypes, slice]) -> src.Stimulus.Stimulus

      Creates an external stimulus (Gabor texture) and prepares for the neural network input.

      :param spatial_freq: spatial frequency of the grating (cycles / degree).
      :type spatial_freq: float

      :param vlum: luminance of the void.
      :type vlum: float

      :param diameter_dg: annulus' diameter in degrees.
      :type diameter_dg: float

      :param diameter: resolution (number of pixels in a single row) of single grating.
      :type diameter: int

      :param dist_scale: how far the circles are from each other.
      :type dist_scale: float

      :param full_width_dg: width of the full stimulus in degrees.
      :type full_width_dg: float

      :param full_height_dg: height of the full stimulus in degrees.
      :type full_height_dg: float

      :param contrast_range: contrast range for the figure.
      :type contrast_range: float

      :param figure_width_dg: width of the figure in degrees.
      :type figure_width_dg: float

      :param figure_height_dg: height of the figure in degrees.
      :type figure_height_dg: float

      :param figure_ecc_dg: distance between the center of the stimulus and the center of the figure in degrees.
      :type figure_ecc_dg: float

      :param patch_size_dg: side length of the stimulus patch in degrees.
      :type patch_size_dg: float

      :param nr_ping_networks: number of circuits created by applying the lattice.
      :type nr_ping_networks: int

      :param slope: slope of the receptive field size.
      :type slope: float

      :param intercept: intercept of the receptive field size.
      :type intercept: float

      :param min_diam_rf: minimal size of the receptive field.
      :type min_diam_rf: float

      :param nr_neurons: dictionary of number of neurons of each type and the total number of neurons.
      :type nr_neurons: dict[Any, int]

      :param neur_slice: indices of each type of neurons.
      :type neur_slice: dict[NeuronTypes, slice]

      :raises:
          AssertionError: if the minimal diameter of the receptive field is not larger than 0.
      :raises:
          AssertionError: if the number of circuits is not a square as these circuits should be arranged in a square
          grid.
      :raises:
          AssertionError: if vertical lines of lattice cut through pixels.
      :raises:
          AssertionError: if horizontal lines of lattice cut through pixels.

      :return: a stimulus ready for the usage in a neural network.
      :rtype: Stimulus



