:py:mod:`InputStimulus`
=======================

.. py:module:: InputStimulus


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   InputStimulus.InputStimulus




.. py:class:: InputStimulus(dist_scale, contrast_range, spatial_freq, diameter, side_length, grating_res, patch_res, nr_circuits, slope, intercept, min_diam_rf)

   Bases: :py:obj:`src.GaborLuminanceStimulus.GaborLuminanceStimulus`

   This class transforms a luminance stimulus patch to current.

   TODO:: more elaborate explanation + ref.

   :param dist_scale: how far the circles are from each other.
   :type dist_scale: float

   :param contrast_range: contrast range for the figure.
   :type contrast_range: float

   :param spatial_freq: spatial frequency of the grating (cycles / degree).
   :type spatial_freq: float

   :param diameter: annulus diameter (degree).
   :type diameter: float

   :param side_length: side length (degree) of square stimulus region.
   :type side_length: TODO:: float or int?

   :param grating_res: resolution (number of pixels in a single row) of single grating.
   :type grating_res: int

   :param patch_res: resolution (number of pixels in a single row) of the stimulus patch.
   :type patch_res: int

   :param nr_circuits: number of circuits created by applying the lattice.
   :type nr_circuits: int

   :param slope: slope of the receptive field size.
   :type slope: float

   :param intercept: intercept of the receptive field size.
   :type intercept: float

   :param min_diam_rf: minimal size of the receptive field.
   :type min_diam_rf: float


   :raises:
       AssertionError: if the minimal diameter of the receptive field is not larger than 0.
   :raises:
       AssertionError: if the number of circuits is not a square as these circuits should be arranged in a square
       grid.


   :ivar _nr_circuits: number of circuits created by applying the lattice.
   :type _nr_circuits: int

   :ivar current: list of currents produced by respective circuits in the stimulus.
   :type current: list[float]

   .. py:method:: _assign_circuits(self)

      Creates circuits and assigns centers and pixels of the stimulus patch to them.

      :return: list of all circuits of the stimulus patch created by applying a lattice.
      :rtype: list[StimulusCircuit]


   .. py:method:: _get_input_current(self, circuits, slope, intercept, min_diam_rf)

      Performes all the neccessary steps to transform luminance to _current.

      :param circuits: list of all circuits of the stimulus patch created by applying a lattice.
      :type circuits: list[StimulusCircuit]

      :param slope: slope of the receptive field size.
      :type slope: float

      :param intercept: intercept of the receptive field size.
      :type intercept: float

      :param min_diam_rf: minimal size of the receptive field.
      :type min_diam_rf: float

      :return: list containing currents created by each circuit.
      :rtype: list[float]


   .. py:method:: _get_weight(self, center, pixel, slope, intercept, min_diam_rf)

      Computes weight of a pixel with respect to a circuit.

      :param center: coordinate of the circuit center.
      :type center: tuple(float, float)

      :param pixel: coordinate of the pixel.
      :type pixel: tuple(float, float)

      :param slope: slope of the receptive field size.
      :type slope: float

      :param intercept: intercept of the receptive field size.
      :type intercept: float

      :param min_diam_rf: minimal size of the receptive field.
      :type min_diam_rf: float

      :return: weight of a pixel with respect to a circuit.
      :rtype: float


   .. py:method:: _compute_local_contrasts(self, circuits, slope, intercept, min_diam_rf)

      Computes local contrasts for each circuit.

      :param circuits: list of all circuits of the stimulus patch created by applying a lattice.
      :type circuits: list[StimulusCircuit]

      :param slope: slope of the receptive field size.
      :type slope: float

      :param intercept: intercept of the receptive field size.
      :type intercept: float

      :param min_diam_rf: minimal size of the receptive field.
      :type min_diam_rf: float

      :return: list containing local contrast values for each circuit.
      :rtype: list[float]


   .. py:method:: _compute_frequencies(self, local_contrasts)

      Computes oscillation frequencies of the circuit through local contrasts.

      :param local_contrasts: list containing local contrast values for each circuit.
      :type local_contrasts: list[float]

      :return: list containing oscillation frequencies for each circuit.
      :rtype: ndarray[float]


   .. py:method:: _compute_current(self, frequencies)

      Computes _current through oscillation frequencies. ARTIFICIAL FUNCTION - REAL NOT IMPLEMENTED YET.

      :param frequencies: list containing oscillation frequencies for each circuit.
      :type frequencies: list[float]

      :return: TODO
      :rtype: list[float]



