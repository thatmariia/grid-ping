:py:mod:`ConnectivityGridPINGFactory`
=====================================

.. py:module:: ConnectivityGridPINGFactory


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ConnectivityGridPINGFactory.ConnectivityGridPINGFactory




.. py:class:: ConnectivityGridPINGFactory

   This class determines the connectivity between neurons in the oscillatory network.

   .. py:method:: create(self, params_ping: src.izhikevich_simulation.GridGeometryFactory.ParamsPING, params_connectivity: src.params.ParamsConnectivity.ParamsConnectivity, cortical_coords: list[list[tuple[float, float]]]) -> src.izhikevich_simulation.Connectivity.Connectivity

      Determines the connectivity between neurons in the oscillatory network.

      :param params_ping: parameters describing PING networks and their composition.
      :type params_ping: ParamsPING

      :param params_connectivity: parameters of the network connectivity.
      :type params_connectivity: ParamsConnectivity

      :param cortical_coords: coordinates of the points in the visual cortex.
      :type cortical_coords: list[list[tuple[float, float]]]

      :return: connectivity between neurons in the oscillatory network.
      :rtype: Connectivity


   .. py:method:: _compute_coupling_weights(self, params_ping: src.izhikevich_simulation.GridGeometryFactory.ParamsPING, params_connectivity: src.params.ParamsConnectivity.ParamsConnectivity, grid_geometry: src.izhikevich_simulation.GridGeometry.GridGeometry, cortical_coords: list[list[tuple[float, float]]]) -> numpy.ndarray[(int, int), float]

      Computes the coupling weights between all neurons.

      Essentially, this method computes the full matrix :math:`K` of coupling weights.
      The approach is derived from :cite:p:`Lowet2015`.

      :param params_ping: parameters describing PING networks and their composition.
      :type params_ping: ParamsPING

      :param params_connectivity: parameters of the network connectivity.
      :type params_connectivity: ParamsConnectivity

      :param grid_geometry: contains information about grid locations of PING networks and neurons located in them.
      :type grid_geometry: GridGeometry

      :param cortical_coords: coordinates of the points in the visual cortex.
      :type cortical_coords: list[list[tuple[float, float]]]

      :return: matrix of all coupling weights.
      :rtype: numpy.ndarray[(int, int), float]


   .. py:method:: _get_neurons_dist(self, neuron_type1: src.izhikevich_simulation.GridGeometry.NeuronTypes, neuron_type2: src.izhikevich_simulation.GridGeometry.NeuronTypes, nr1: int, nr2: int, grid_geometry: src.izhikevich_simulation.GridGeometry.GridGeometry, cortical_coords: list[list[tuple[float, float]]]) -> numpy.ndarray[(int, int), float]

      Computes the matrix of Euclidian distances between two types of neurons.

      This method computes a matrix of :math:`\| \mathsf{loc}(v), \mathsf{loc}(w) \|` between neurons :math:`v` and
      :math:`w` of given types.

      :param neuron_type1: neurons neuron_type 1
      :type neuron_type1: NeuronTypes

      :param neuron_type2: neurons neuron_type 2
      :type neuron_type2: NeuronTypes

      :param nr1: number of neurons of neuron_type 1
      :type nr1: int

      :param nr2: number of neurons of neuron_type 2
      :type nr2: int

      :param grid_geometry: contains information about grid locations of PING networks and neurons located in them.
      :type grid_geometry: GridGeometry

      :param cortical_coords: coordinates of the points in the visual cortex.
      :type cortical_coords: list[list[tuple[float, float]]]

      :return: The matrix nr1 x nr2 of pairwise distances between neurons.
      :rtype: numpy.ndarray[(int, int), float]


   .. py:method:: _compute_type_coupling_weights(self, dist: numpy.ndarray[(int, int), float], max_connect_strength: float, spatial_const: float) -> numpy.ndarray[(int, int), float]

      Computes the coupling weights for connections between two types of neurons.

      This method computes a matrix of :math:`K_{v, w}` between neurons :math:`v` and
      :math:`w` of given types.

      :param dist: distance matrix with pairwise distances between neurons.
      :type dist: numpy.ndarray[(int, int), float]

      :param max_connect_strength: max connection strength between neuron types.
      :type max_connect_strength: float

      :param spatial_const: spatial constant for the neuron types.
      :type spatial_const: float

      :return: the matrix of coupling weights of size nr1 x nr2, where n1 and nr2 - number of neurons of
          each neuron_type in the coupling of interest.
      :rtype: numpy.ndarray[(int, int), float]



