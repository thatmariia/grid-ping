:py:mod:`GaborLuminanceStimulusFactory`
=======================================

.. py:module:: GaborLuminanceStimulusFactory


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   GaborLuminanceStimulusFactory.GaborLuminanceStimulusFactory




.. py:class:: GaborLuminanceStimulusFactory

   This class constructs the Gabor texture stimulus (and a patch from it).

   The external stimulus represents a rectangular grid of non-overlapping equispaced grating annuli -
   circular Gabor wavelets :cite:p:`MaryamPLACEHOLDER`. The luminance of the stimuli varies between 0 (black) and
   1 (white). All annuli have equal diameters but vary in contrast. The grid includes a figure - a rectangular subgrid
   in the bottom right quadrant of the stimulus, where all annuli share similar contrasts, and a background that
   constitutes the rest of the grid. There, annuli vary in contrast significantly. The contrast of every annulus is
   selected at random, depending on the location of the annulus. All areas in the stimulus uncovered by annuli (void)
   share the same luminance. A square-shaped patch of the stimulus' figure is selected as an input to the Izhikevich
   oscillatory network (see :obj:`IzhikevichNetworkSimulator`).

   .. py:method:: create(self, spatial_freq: float, vlum: float, diameter_dg: float, diameter: int, dist_scale: float, full_width_dg: float, full_height_dg: float, contrast_range: float, figure_width_dg: float, figure_height_dg: float, figure_ecc_dg: float, patch_size_dg: float) -> src.GaborLuminanceStimulus.GaborLuminanceStimulus

      Goes through the steps to construct the luminance stimulus.

      :param spatial_freq: spatial frequency of the grating (cycles / degree).
      :type spatial_freq: float

      :param vlum: luminance of the void.
      :type vlum: float

      :param diameter_dg: annulus' diameter in degrees.
      :type diameter_dg: float

      :param diameter: resolution (number of pixels in a single row) of single grating.
      :type diameter: int

      :param dist_scale: how far the circles are from each other.
      :type dist_scale: float

      :param full_width_dg: width of the full stimulus in degrees.
      :type full_width_dg: float

      :param full_height_dg: height of the full stimulus in degrees.
      :type full_height_dg: float

      :param contrast_range: contrast range for the figure.
      :type contrast_range: float

      :param figure_width_dg: width of the figure in degrees.
      :type figure_width_dg: float

      :param figure_height_dg: height of the figure in degrees.
      :type figure_height_dg: float

      :param figure_ecc_dg: distance between the center of the stimulus and the center of the figure in degrees.
      :type figure_ecc_dg: float

      :param patch_size_dg: side length of the stimulus patch in degrees.
      :type patch_size_dg: float

      :raises:
          AssertionError: spatial frequency is not greater than 0.
      :raises:
          AssertionError: void luminance does not fall in range :math:`[0, 1]`.
      :raises:
          AssertionError: annulus diameter is not larger than 0 degrees.
      :raises:
          AssertionError: annulus diameter is smaller than 1 pixel.
      :raises:
          AssertionError: the distance between neighbouring annuli is less than 1 diameter.
      :raises:
          AssertionError: stimulus is less wide than annulus.
      :raises:
          AssertionError: stimulus is less tall than annulus.
      :raises:
          AssertionError: contrast range does not fall in range :math:`(0, 1]`.
      :raises:
          AssertionError: figure width is larger than half the width of the stimulus or is not larger than 0.
      :raises:
          AssertionError: figure height is larger than half the height of the stimulus or is not larger than 0.
      :raises:
          AssertionError: figure cannot be positioned so that it is contained within the stimulus quadrant.
      :raises:
          AssertionError: size of the patch is smaller than one of the figure sides.

      :return: the luminance stimulus.
      :rtype: GaborLuminanceStimulus


   .. py:method:: _get_grating(self, spatial_freq: float, diameter_dg: float, diameter: int) -> numpy.ndarray[(int, int), float]

      Generates a grating (single annulus) of the maximum contrast.

      :param spatial_freq: spatial frequency of the grating (cycles / degree).
      :type spatial_freq: float

      :param diameter_dg: annulus diameter in degrees.
      :type diameter_dg: float

      :param diameter: resolution (number of pixels in a single row) of single grating.
      :type diameter: int

      :return: the luminance matrix of the single annulus.
      :rtype: numpy.ndarray[(int, int), float]


   .. py:method:: _get_figure_coords(self, full_width: int, full_height: int, figure_width: int, figure_height: int, figure_ecc: float) -> tuple[tuple[int, int], tuple[int, int], tuple[float, float]]

      Determines the location of the figure within the stimulus.

      :param full_width: width of the full stimulus.
      :type full_width: int

      :param full_height: height of the full stimulus.
      :type full_height: int

      :param figure_width: width of the figure.
      :type figure_width: float

      :param figure_height: height of the figure.
      :type figure_height: float

      :param figure_ecc: distance between the center of the stimulus and the center of the figure.
      :param figure_ecc: float

      :return: top left, bottom right, and center coordinates of the figure.
      :rtype: tuple[tuple[int, int], tuple[int, int], tuple[float, float]]


   .. py:method:: _get_full_stimulus(self, full_width: int, full_height: int, grating: numpy.ndarray[(int, int), float], diameter: int, contrast_range: float, dist_scale: float, figure_start: tuple[int, int], figure_end: tuple[int, int]) -> numpy.ndarray[(int, int), float]

      Generates the whole stimulus.

      :param full_width: width of the full stimulus.
      :type full_width: int

      :param full_height: height of the full stimulus.
      :type full_height: int

      :param grating: :param grating: the luminance matrix of the annulus.
      :type grating: numpy.ndarray[(int, int), float]

      :param diameter: annulus diameter.
      :type diameter: float

      :param contrast_range: contrast range for the figure.
      :type contrast_range: float

      :param dist_scale: how far the annuli are from each other.
      :type dist_scale: float

      :param figure_start: left top coordinate of the figure.
      :type figure_start: tuple[int, int]

      :param figure_end: bottom right coordinate of the figure.
      :type figure_end: tuple[int, int]

      :return: luminance matrix of the stimulus.
      :rtype: numpy.ndarray[(int, int), float]


   .. py:method:: _is_annulus_in_figure(self, annulus_corners: list[tuple[int, int]], figure_start: tuple[int, int], figure_end: tuple[int, int]) -> bool

      Checks if an annulus belongs to the figure.

      :param annulus_corners: list of corner coordinates of the annulus.
      :type annulus_corners: list[tuple[int, int]]

      :param figure_start: left top coordinate of the figure.
      :type figure_start: tuple[int, int]

      :param figure_end: bottom right coordinate of the figure.
      :type figure_end: tuple[int, int]

      :return: True if the annulus belongs to the figure, False otherwise.
      :rtype: bool


   .. py:method:: _select_stimulus_patch(self, stimulus: numpy.ndarray[(int, int), float], figure_center: tuple[float, float], patch_size: int) -> tuple[tuple[int, int], numpy.ndarray[(int, int), float]]

      Selects a patch of the stimulus.

      :param stimulus: luminance matrix of the stimulus.
      :type stimulus: numpy.ndarray[(int, int), float]

      :param figure_center: the center point of the figure.
      :type figure_center: tuple[float, float]

      :param patch_size: side length of the stimulus.
      :type patch_size: int

      :return: the luminance matrix of a patch of the stimulus and its top left coordinate.
      :rtype: tuple[tuple[int, int], numpy.ndarray[(int, int), float]]



